<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".cs" #>
public static class StuntUsage
{
    static StuntUsage()
    {
<#
foreach (var type in Directory.EnumerateFiles(this.Host.ResolvePath("bin\\Debug"), "*.dll")
    .Where(file => !file.Contains("xunit"))
    .Select(TryLoadAssembly)
    .Where(asm => asm != null)
    .SelectMany(TryGetExportedTypes)
    .Where(t => !t.IsSealed && !t.IsValueType && !t.IsGenericType && 
                t.GetConstructor(Type.EmptyTypes) != null &&
                t.GetCustomAttribute<ObsoleteAttribute>() == null && 
                !t.GetMethods().Any(x => x.IsGenericMethodDefinition)))
{
#>
        Stunts.Stunt.Of<<#= type.FullName.Replace('+', '.') #>>();
<#
}
#>
    }
}
<#+ 
private Assembly TryLoadAssembly(string assemblyFile)
{
    try
    {
        return Assembly.LoadFrom(assemblyFile);
    } 
    catch (Exception e)
    {
        Warning(e.ToString());
        return null;
    }
}

private IEnumerable<Type> TryGetExportedTypes(Assembly asm)
{
    try
    {
        return asm.GetExportedTypes();
    } 
    catch (Exception e)
    {
        Warning(e.ToString());
        return Enumerable.Empty<Type>();
    }
}
#>